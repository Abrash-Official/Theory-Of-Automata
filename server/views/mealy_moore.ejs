<div class="card mb-4">
    <div class="card-header" id="mealyMooreHeader" style="background-color: transparent !important;">
        <h3 class="card-title mb-0">Mealy and Moore Machines</h3>
    </div>
    <div class="card-body">
        <h4 class="mb-3">Formal Definitions</h4>

        <h5 class="mt-4">Moore Machine</h5>
        <div class="alert alert-info mt-2 p-3 rounded">
            <pre>
A Moore Machine is defined as a 6-tuple:
M = (Q, q₀, Σ, O, δ, λ)

Q: Finite set of states

q₀: Initial state

Σ: Input alphabet

O: Output alphabet

δ: Transition function Q×Σ→Q

λ: Output function Q→O

Key Feature: Output depends only on the current state.
</pre>
        </div>

        <h5 class="mt-4">Mealy Machine</h5>
        <div class="alert alert-info mt-2 p-3 rounded">
            <pre>
A Mealy Machine is defined as a 6-tuple:
M = (Q, q₀, Σ, O, δ, λ′)

λ': Output function Q×Σ→O

Key Feature: Output depends on both the current state and input.
</pre>
        </div>

        <h4 class="mt-4">Key Differences</h4>
        <div class="alert alert-info mt-2 p-3 rounded">
        <div class="table-responsive">
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Aspect</th>
                            <th>Moore Machine</th>
                            <th>Mealy Machine</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Output Dependency</td>
                            <td>Current state only</td>
                            <td>Current state + input</td>
                        </tr>
                        <tr>
                            <td>Output Placement</td>
                            <td>Associated with states</td>
                            <td>Associated with transitions</td>
                        </tr>
                        <tr>
                            <td>State Count</td>
                            <td>More states (outputs tied to states)</td>
                            <td>Fewer states (outputs tied to transitions)</td>
                        </tr>
                        <tr>
                            <td>Response Time</td>
                            <td>Slower (output updates on state change)</td>
                            <td>Faster (output updates immediately)</td>
                        </tr>
                        <tr>
                            <td>Hardware Complexity</td>
                            <td>Higher (separate output logic)</td>
                            <td>Lower (combined state-input logic)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <h4 class="mt-4">Conversion Methods</h4>
        <h5 class="mt-4">Mealy → Moore Machine</h5>
        <div class="alert alert-info mt-2 p-3 rounded">
            <h6>Steps:</h6>
            <p>Identify States with Multiple Outputs: Split states like <code class="text-nowrap">q₁</code> into <code class="text-nowrap">q₁₀</code> (output 0) and <code class="text-nowrap">q₁₁</code> (output 1).</p>
            <p>Rebuild Transition Table: Redirect transitions to new states based on outputs.</p>

            <h6>Example:</h6>
            <p>Original Mealy Machine Transition Table:</p>
            <div class="table-responsive bg-dark p-2 rounded">
                <table class="table table-bordered table-sm text-white">
                    <thead class="table-light">
                        <tr>
                            <th>State</th>
                            <th>Input=0</th>
                            <th>Input=1</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>q0</td>
                            <td>q1/0</td>
                            <td>q2/0</td>
                        </tr>
                        <tr>
                            <td>q1</td>
                            <td>q1/0</td>
                            <td>q2/1</td>
                        </tr>
                        <tr>
                            <td>q2</td>
                            <td>q1/1</td>
                            <td>q2/0</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <p>Converted Moore Machine Transition Table:</p>
            <div class="table-responsive bg-dark p-2 rounded">
                <table class="table table-bordered table-sm text-white">
                    <thead class="table-light">
                        <tr>
                            <th>State</th>
                            <th>Output</th>
                            <th>Input=0</th>
                            <th>Input=1</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>q0</td>
                            <td>0</td>
                            <td>q10</td>
                            <td>q20</td>
                        </tr>
                        <tr>
                            <td>q10</td>
                            <td>0</td>
                            <td>q10</td>
                            <td>q21</td>
                        </tr>
                        <tr>
                            <td>q21</td>
                            <td>1</td>
                            <td>q10</td>
                            <td>q21</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <h5 class="mt-4">Moore → Mealy Machine</h5>
        <div class="alert alert-info mt-2 p-3 rounded">
            <h6>Steps:</h6>
            <p>Attach Outputs to Transitions: For each transition <code class="text-nowrap">qᵢ →ᵃ qⱼ</code>, set output = <code class="text-nowrap">λ(qⱼ)</code>.</p>
            <p>Simplify Redundant States: Merge states with identical transitions.</p>

            <h6>Example:</h6>
            <p>Original Moore Machine Outputs:</p>
            <pre>
q₀: 0, q₁: 1
</pre>
            <p>Converted Mealy Machine Transition Table:</p>
            <div class="table-responsive bg-dark p-2 rounded">
                <table class="table table-bordered table-sm text-white">
                <thead class="table-light">
                        <tr>
                            <th>State</th>
                            <th>Input=0</th>
                            <th>Input=1</th>
                        </tr>
                </thead>
                <tbody>
                        <tr>
                            <td>q0</td>
                            <td>q1/1</td>
                            <td>q2/1</td>
                        </tr>
                </tbody>
            </table>
            </div>
        </div>

        <h4 class="mt-4">Examples</h4>
        <h6>Moore Machine for Even Parity Check</h6>
        <div id="mooreParityVisualization" class="cytoscape-container mt-2" style="height: 300px; border: 1px solid #ccc;"></div>
        <p>Outputs: 0 (even), 1 (odd)</p>
        <p>Input: 1101 → Output: 0,0,1,0 (length = input +1)</p>

        <h6>Mealy Machine for Binary Increment</h6>
        <div id="mealyIncrementVisualization" class="cytoscape-container mt-2" style="height: 300px; border: 1px solid #ccc;"></div>
        <p>Input: 1011 → Output: 0001 (LSB first)</p>

        <h4 class="mt-4">Code Example: Moore Machine Simulation</h4>
        <div class="alert alert-info mt-2 p-3 rounded">
            <label for="pythonCodeInputMooreMealy" class="form-label">Enter Python Code:</label>
            <textarea class="form-control" id="pythonCodeInputMooreMealy" rows="15">
class MooreMachine:
    def __init__(self):
        self.state = 'q0'
        self.output_map = {'q0': 0, 'q1': 1}
    
    def transition(self, input_bit):
        if self.state == 'q0':
            self.state = 'q1' if input_bit == '1' else 'q0'
        elif self.state == 'q1':
            self.state = 'q0' if input_bit == '1' else 'q1'
        return self.output_map[self.state]

# Test
mm = MooreMachine()
inputs = ['1', '1', '0']
outputs = [mm.transition(bit) for bit in inputs]
print(f"Outputs: {outputs}")  # Outputs: [1, 0, 1]
</textarea>
            <button type="button" class="btn btn-primary mb-3" id="runPythonCodeBtnMooreMealy">Run Code</button>
            <h6>Output:</h6>
            <pre class="alert alert-info mt-2 p-3 rounded"><code id="pythonCodeOutputMooreMealy"></code></pre>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize CodeMirror for Python code input in Mealy/Moore page
        const pythonCodeEditorElementMooreMealy = document.getElementById('pythonCodeInputMooreMealy');
        if (pythonCodeEditorElementMooreMealy && typeof CodeMirror !== 'undefined') {
            window.AutomataEdu = window.AutomataEdu || {};
            window.AutomataEdu.codeEditorInstanceMooreMealy = CodeMirror.fromTextArea(pythonCodeEditorElementMooreMealy, {
                mode: 'python',
                theme: 'dracula',
                lineNumbers: true,
                indentUnit: 4,
                tabSize: 4,
                lineWrapping: true,
                readOnly: false
            });
            document.getElementById('runPythonCodeBtnMooreMealy').addEventListener('click', runPythonCodeMooreMealy);
        }

        // Initialize Moore Machine for Even Parity Check visualization
        const mooreParityVisualizationContainer = document.getElementById('mooreParityVisualization');
        if (mooreParityVisualizationContainer && typeof renderAutomaton !== 'undefined') {
            const mooreParityData = {
                states: [
                    { id: 'q0', label: 'q0', isStart: true, isFinal: false, color: '#48bb78', output: '0' }, // green
                    { id: 'q1', label: 'q1', isStart: false, isFinal: false, color: '#718096', output: '1' }  // gray
                ],
                transitions: [
                    { from: 'q0', to: 'q0', symbol: '0', output: '0' },
                    { from: 'q0', to: 'q1', symbol: '1', output: '1' },
                    { from: 'q1', to: 'q0', symbol: '1', output: '0' },
                    { from: 'q1', to: 'q1', symbol: '0', output: '1' }
                ]
            };
            renderAutomaton('mooreParityVisualization', mooreParityData);
        }

        // Initialize Mealy Machine for Binary Increment visualization
        const mealyIncrementVisualizationContainer = document.getElementById('mealyIncrementVisualization');
        if (mealyIncrementVisualizationContainer && typeof renderAutomaton !== 'undefined') {
            const mealyIncrementData = {
                states: [
                    { id: 'q0', label: 'q0', isStart: true, isFinal: false, color: '#4299e1' }, // blue
                    { id: 'q1', label: 'q1', isStart: false, isFinal: false, color: '#ed64a6' } // pink
                ],
                transitions: [
                    { from: 'q0', to: 'q0', symbol: '0', output: '0' },
                    { from: 'q0', to: 'q1', symbol: '1', output: '0' },
                    { from: 'q1', to: 'q0', symbol: '0', output: '1' },
                    { from: 'q1', to: 'q1', symbol: '1', output: '1' }
                ]
            };
            renderAutomaton('mealyIncrementVisualization', mealyIncrementData);
        }
    });

    // Function to run Python code for Mealy/Moore page
    async function runPythonCodeMooreMealy() {
        const outputElement = document.getElementById('pythonCodeOutputMooreMealy');
        const codeEditor = window.AutomataEdu.codeEditorInstanceMooreMealy;
        const code = codeEditor.getValue();
        outputElement.textContent = 'Running code...';

        try {
            const response = await fetch('/run_python_code', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code: code }),
            });
            const data = await response.json();
            if (data.output) {
                outputElement.textContent = data.output;
            } else if (data.error) {
                outputElement.textContent = `Error: ${data.error}`;
                console.error('Python code execution error:', data.error);
            } else {
                outputElement.textContent = 'An unexpected error occurred.';
                console.error('Unexpected response from server:', data);
            }
        } catch (error) {
            outputElement.textContent = `Request failed: ${error}`;
            console.error('Fetch error:', error);
        }
    }
</script> 