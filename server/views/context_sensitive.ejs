<div class="card mb-4">
    <div class="card-header" id="contextSensitiveHeader" style="background-color: transparent !important;">
        <h3 class="card-title mb-0">Context-Sensitive Languages, Linear Bounded Automata (LBA), Chomsky Hierarchy</h3>
    </div>
    <div class="card-body">
        <h4 class="mb-3">Introduction</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <pre style="white-space: pre-wrap; word-break: break-word;">Context-sensitive languages (CSLs) are more powerful than context-free languages but less powerful than recursively enumerable languages. They are recognized by Linear Bounded Automata (LBA), a restricted form of Turing machine.</pre>
        </div>
        <h4 class="mt-4">Linear Bounded Automata (LBA)</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <pre style="white-space: pre-wrap; word-break: break-word;">An LBA is a non-deterministic Turing machine with a tape bounded by a linear function of the input length. LBAs recognize exactly the class of context-sensitive languages.</pre>
        </div>
        <h4 class="mt-4">Chomsky Hierarchy</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <pre style="white-space: pre-wrap; word-break: break-word;">The Chomsky Hierarchy classifies languages into four types:
- Type 0: Recursively enumerable (Turing machines)
- Type 1: Context-sensitive (LBAs)
- Type 2: Context-free (PDAs)
- Type 3: Regular (FAs)

Each type is a strict superset of the next.</pre>
        </div>
        <h4 class="mt-4">Chomsky Hierarchy Diagram</h4>
        <div id="chomskyHierarchyVisualization" class="cytoscape-container mt-2" style="height: 300px; border: 1px solid #ccc;"></div>
        <h4 class="mt-4">Code Example: LBA Simulation in Python</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <label for="pythonCodeInputLBA" class="form-label">Enter Python Code:</label>
            <textarea class="form-control" id="pythonCodeInputLBA" rows="15" style="max-width: 100%; white-space: pre; overflow-x: auto;">class LBA:
    def __init__(self, tape, transitions, start_state, accept_state, reject_state):
        self.tape = list(tape)
        self.head = 0
        self.state = start_state
        self.transitions = transitions
        self.accept_state = accept_state
        self.reject_state = reject_state
        self.left_bound = 0
        self.right_bound = len(tape) - 1

    def step(self):
        if self.head < self.left_bound or self.head > self.right_bound:
            self.state = self.reject_state
            return
        symbol = self.tape[self.head]
        key = (self.state, symbol)
        if key in self.transitions:
            new_state, write_symbol, direction = self.transitions[key]
            self.tape[self.head] = write_symbol
            self.state = new_state
            if direction == 'R':
                self.head += 1
            elif direction == 'L':
                self.head -= 1
        else:
            self.state = self.reject_state

    def run(self, max_steps=100):
        steps = 0
        while self.state != self.accept_state and self.state != self.reject_state and steps < max_steps:
            print(f"State: {self.state}, Tape: {''.join(self.tape)}, Head: {self.head}")
            self.step()
            steps += 1
        print(f"Final State: {self.state}, Tape: {''.join(self.tape)}, Head: {self.head}")

# Example transitions for a simple LBA
transitions = {
    ('q0', 'a'): ('q1', 'X', 'R'),
    ('q1', 'a'): ('q1', 'a', 'R'),
    ('q1', 'b'): ('q2', 'b', 'L'),
    ('q2', 'X'): ('q0', 'X', 'R'),
    ('q0', 'b'): ('q_accept', 'b', 'R'),
}
LBA('aab', transitions, 'q0', 'q_accept', 'q_reject').run()</textarea>
            <button type="button" class="btn btn-primary mb-3" id="runPythonCodeBtnLBA">Run Code</button>
            <h6>Output:</h6>
            <pre class="alert alert-info mt-2 p-3 rounded overflow-x-auto" id="pythonCodeOutputLBA" style="max-width: 100%; white-space: pre-wrap; word-break: break-word;"></pre>
        </div>
        <h4 class="mt-4">MCQs on Context-Sensitive Languages & Chomsky Hierarchy</h4>
        <div id="mcq-container-context-sensitive">
            <div class="mcq-progress text-end mb-2"></div>
            <ol class="mcq-list" style="list-style: none; padding-left: 0;">
                <li data-correct-answer="C" class="mcq-question-item">
                    <p class="mb-3">Which machine recognizes context-sensitive languages?</p>
                    <div class="list-group mb-3">
                        <button type="button" class="list-group-item list-group-item-action mcq-option" data-option="A">a) Finite Automaton</button>
                        <button type="button" class="list-group-item list-group-item-action mcq-option" data-option="B">b) Pushdown Automaton</button>
                        <button type="button" class="list-group-item list-group-item-action mcq-option" data-option="C">c) Linear Bounded Automaton</button>
                        <button type="button" class="list-group-item list-group-item-action mcq-option" data-option="D">d) Turing Machine</button>
                    </div>
                    <button type="button" class="btn btn-primary submit-mcq-btn">Submit Answer</button>
                    <p class="feedback mt-2"></p>
                </li>
                <!-- More MCQs can be added here -->
            </ol>
            <p class="mt-3">Master the Chomsky Hierarchy to understand language classes!</p>
        </div>
        <h4 class="mt-4">Key Notes</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <pre style="white-space: pre-wrap; word-break: break-word;">- LBAs are less powerful than Turing machines but more powerful than PDAs.
- The Chomsky Hierarchy is fundamental to formal language theory.
- Context-sensitive languages are not closed under all operations.
- Not all context-sensitive languages are decidable.</pre>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize CodeMirror for Python code input in LBA page
        const pythonCodeEditorElementLBA = document.getElementById('pythonCodeInputLBA');
        if (pythonCodeEditorElementLBA && typeof CodeMirror !== 'undefined') {
            window.AutomataEdu.codeEditorInstanceLBA = CodeMirror.fromTextArea(pythonCodeEditorElementLBA, {
                mode: 'python',
                theme: 'dracula',
                lineNumbers: true,
                indentUnit: 4,
                tabSize: 4,
                lineWrapping: true,
                readOnly: false
            });
            document.getElementById('runPythonCodeBtnLBA').addEventListener('click', runPythonCodeLBA);
        }
        // Chomsky Hierarchy visualization
        const chomskyHierarchyVisualizationContainer = document.getElementById('chomskyHierarchyVisualization');
        if (chomskyHierarchyVisualizationContainer && typeof renderAutomaton !== 'undefined') {
            const hierarchyData = {
                states: [
                    { id: 'type0', label: 'Type 0\nRecursively Enumerable', color: '#ed64a6' },
                    { id: 'type1', label: 'Type 1\nContext-Sensitive', color: '#4299e1' },
                    { id: 'type2', label: 'Type 2\nContext-Free', color: '#48bb78' },
                    { id: 'type3', label: 'Type 3\nRegular', color: '#ecc94b' }
                ],
                transitions: [
                    { from: 'type0', to: 'type1', symbol: '⊃' },
                    { from: 'type1', to: 'type2', symbol: '⊃' },
                    { from: 'type2', to: 'type3', symbol: '⊃' }
                ]
            };
            renderAutomaton('chomskyHierarchyVisualization', hierarchyData);
        }
    });
</script> 