<div class="card mb-4">
    <div class="card-header" id="pdaHeader" style="background-color: transparent !important;">
        <h3 class="card-title mb-0">Pushdown Automata (PDA)</h3>
    </div>
    <div class="card-body">
        <h4 class="mb-3">Introduction</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <pre style="white-space: pre-wrap; word-break: break-word;">A Pushdown Automaton (PDA) is a computational model that extends the capabilities of a finite automaton by adding a stack-based memory. This extra memory allows PDAs to recognize context-free languages, which are more complex than regular languages accepted by finite automata. PDAs play a crucial role in parsing, compiler design, and formal language theory.</pre>
        </div>
        <h4 class="mt-4">Formal Definition</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <pre style="white-space: pre-wrap; word-break: break-word;">A PDA is formally defined as a 7-tuple:
(Q, Σ, Γ, δ, q₀, Z, F)
Where:
Q: Set of states
Σ: Input alphabet
Γ: Stack alphabet
δ: Transition function (Q × (Σ ∪ {ε}) × Γ → Q × Γ*)
q₀: Initial state
Z: Initial stack symbol
F: Set of final states</pre>
        </div>
        <h4 class="mt-4">How a PDA Works</h4>
        <ul>
            <li><b>Input Tape:</b> Holds the string to be processed.</li>
            <li><b>Reading Head:</b> Reads symbols from the input.</li>
            <li><b>Finite Control:</b> Determines the next action.</li>
            <li><b>Stack:</b> Stores symbols, allowing push and pop operations.</li>
            <li><b>Transitions:</b> Depend on the current state, input symbol (or ε), and top of the stack symbol.</li>
        </ul>
        <h4 class="mt-4">Instantaneous Description (ID)</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <pre style="white-space: pre-wrap; word-break: break-word;">An ID is a triple (q, w, α), where:
q: Current state
w: Remaining input
α: Stack contents (top at the left).</pre>
        </div>
        <h4 class="mt-4">Graph Example: PDA for L = {aⁿbⁿ | n ≥ 1}</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <pre style="white-space: pre-wrap; word-break: break-word;">States: q₀ (start), q₁, q_acc (accept)
Stack symbols: Z (initial), A
Transitions:
(q₀, a, Z) → (q₀, AZ)
(q₀, a, A) → (q₀, AA)
(q₀, b, A) → (q₁, ε)
(q₁, b, A) → (q₁, ε)
(q₁, ε, Z) → (q_acc, Z)
Explanation: For each 'a' read, push an 'A' onto the stack. For each 'b', pop an 'A'. Accept if the stack returns to the initial symbol after all input is read.</pre>
        </div>
        <div id="pdaVisualization" class="cytoscape-container mt-2" style="height: 300px; border: 1px solid #ccc;"></div>
        <h4 class="mt-4">Code Example: PDA Simulation in Python</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <label for="pythonCodeInputPDA" class="form-label">Enter Python Code:</label>
            <textarea class="form-control" id="pythonCodeInputPDA" rows="15" style="max-width: 100%; white-space: pre; overflow-x: auto;">class DPDA:
    def __init__(self, transitions, input_str, state):
        self.head = 0
        self.trf = transitions
        self.state = state
        self.input = input_str
        self.stack = ['Z']

    def step(self):
        a = self.input[self.head] if self.head < len(self.input) else 'ε'
        s = self.stack.pop()
        if (self.state, a, s) in self.trf:
            state, ss = self.trf[(self.state, a, s)]
            if ss != 'ε':
                for symbol in reversed(ss):
                    self.stack.append(symbol)
            self.state = state
            print(f"{self.input[self.head:]:20s} [{''.join(self.stack):10s}] {self.state:5s}")
            self.head += 1

    def run(self):
        print(f"{self.input[self.head:]:20s} [{''.join(self.stack):10s}] {self.state:5s}")
        while self.head < len(self.input):
            self.step()
        s = self.stack.pop()
        if (self.state, 'ε', s) in self.trf:
            state, ss = self.trf[(self.state, 'ε', s)]
            self.state = state
            print(f"{'ε':20s} [{''.join(self.stack):10s}] {self.state:5s}")

# Example transitions for a^n b^n
transitions = {
    ('q', 'a', 'Z'): ('q', 'XZ'),
    ('q', 'a', 'X'): ('q', 'XX'),
    ('q', 'b', 'X'): ('p', 'ε'),
    ('p', 'b', 'X'): ('p', 'ε'),
    ('p', 'ε', 'Z'): ('acc', 'Z'),
}
DPDA(transitions, 'aaabbb', 'q').run()</textarea>
            <button type="button" class="btn btn-primary mb-3" id="runPythonCodeBtnPDA">Run Code</button>
            <h6>Output:</h6>
            <pre class="alert alert-info mt-2 p-3 rounded overflow-x-auto" id="pythonCodeOutputPDA" style="max-width: 100%; white-space: pre-wrap; word-break: break-word;"></pre>
        </div>
        <h4 class="mt-4">MCQs on Pushdown Automata</h4>
        <div id="mcq-container-pda">
            <div class="mcq-progress text-end mb-2"></div>
            <ol class="mcq-list" style="list-style: none; padding-left: 0;">
                <li data-correct-answer="A" class="mcq-question-item">
                    <p class="mb-3">The transition a Pushdown Automaton makes is additionally dependent upon the:</p>
                    <div class="list-group mb-3">
                        <button type="button" class="list-group-item list-group-item-action mcq-option" data-option="A">a) Stack</button>
                        <button type="button" class="list-group-item list-group-item-action mcq-option" data-option="B">b) Input tape</button>
                        <button type="button" class="list-group-item list-group-item-action mcq-option" data-option="C">c) Terminals</button>
                        <button type="button" class="list-group-item list-group-item-action mcq-option" data-option="D">d) None of the mentioned</button>
                    </div>
                    <button type="button" class="btn btn-primary submit-mcq-btn">Submit Answer</button>
                    <p class="feedback mt-2"></p>
                </li>
                <!-- More MCQs can be added here -->
            </ol>
            <p class="mt-3">Master these concepts to understand the power and limitations of PDAs!</p>
        </div>
        <h4 class="mt-4">Applications of PDA</h4>
        <ul>
            <li>Syntax Analysis in Compilers: Parsing programming languages.</li>
            <li>Stack-Based Applications: Arithmetic expression evaluation.</li>
            <li>Network Protocols: Validating message formats.</li>
            <li>Natural Language Processing: Parsing sentences and syntax trees.</li>
            <li>Automatic Theorem Proving: Verifying software models.</li>
        </ul>
        <h4 class="mt-4">Key Notes</h4>
        <div class="alert alert-info mt-2 p-3 rounded overflow-x-auto" style="max-width: 100%;">
            <pre style="white-space: pre-wrap; word-break: break-word;">Deterministic PDA (DPDA): Only one possible move for a given input and stack symbol.
Non-deterministic PDA (NPDA): Multiple possible moves; more expressive than DPDA.
Acceptance: By empty stack or by final state; both are equivalent in power.
Chomsky Hierarchy: PDA accepts all context-free languages (Type 2).</pre>
        </div>
        <h4 class="mt-4">Further Examples</h4>
        <ul>
            <li>PDA for palindromes, L = {wcwᴿ | w ∈ {a, b}*}.</li>
            <li>PDA for L = {aⁿb²ⁿ | n ≥ 1}.</li>
            <li>PDA for L = {w | w has equal number of a's and b's}.</li>
        </ul>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize CodeMirror for Python code input in PDA page
        const pythonCodeEditorElementPDA = document.getElementById('pythonCodeInputPDA');
        if (pythonCodeEditorElementPDA && typeof CodeMirror !== 'undefined') {
            window.AutomataEdu.codeEditorInstancePDA = CodeMirror.fromTextArea(pythonCodeEditorElementPDA, {
                mode: 'python',
                theme: 'dracula',
                lineNumbers: true,
                indentUnit: 4,
                tabSize: 4,
                lineWrapping: true,
                readOnly: false
            });
            document.getElementById('runPythonCodeBtnPDA').addEventListener('click', runPythonCodePDA);
        }
        // Initialize PDA visualization for a^n b^n
        const pdaVisualizationContainer = document.getElementById('pdaVisualization');
        if (pdaVisualizationContainer && typeof renderAutomaton !== 'undefined') {
            const pdaData = {
                states: [
                    { id: 'q0', label: 'q₀', isStart: true, isFinal: false, color: '#48bb78' },
                    { id: 'q1', label: 'q₁', isStart: false, isFinal: false, color: '#4299e1' },
                    { id: 'qacc', label: 'q_acc', isStart: false, isFinal: true, color: '#ed64a6' }
                ],
                transitions: [
                    { from: 'q0', to: 'q0', symbol: 'a, Z/AZ' },
                    { from: 'q0', to: 'q0', symbol: 'a, A/AA' },
                    { from: 'q0', to: 'q1', symbol: 'b, A/ε' },
                    { from: 'q1', to: 'q1', symbol: 'b, A/ε' },
                    { from: 'q1', to: 'qacc', symbol: 'ε, Z/Z' }
                ]
            };
            renderAutomaton('pdaVisualization', pdaData);
        }
    });
</script> 